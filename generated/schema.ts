// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
    ethereum,
    JSONValue,
    TypedMap,
    Entity,
    Bytes,
    Address,
    BigInt,
} from "@graphprotocol/graph-ts";

export class CoinList extends Entity {
    constructor(id : string) {
        super();
        this.set("id", Value.fromString(id));
    }

    save() : void {
        let id = this.get("id");
        assert(id != null, "Cannot save CoinList entity without an ID");
        if (id) {
            assert(
                id.kind == ValueKind.STRING,
                `Entities of type CoinList must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
            );
            store.set("CoinList", id.toString(), this);
        }
    }

    static loadInBlock(id : string) : CoinList | null {
        return changetype<CoinList | null>(store.get_in_block("CoinList", id));
    }

    static load(id : string) : CoinList | null {
        return changetype<CoinList | null>(store.get("CoinList", id));
    }

    get id() : string {
        let value = this.get("id");
        if (!value || value.kind == ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        } else {
            return value.toString();
        }
    }

    set id(value : string) {
        this.set("id", Value.fromString(value));
    }

    get coinFullName() : string | null {
        let value = this.get("coinFullName");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set coinFullName(value : string) {
        this.set("coinFullName", Value.fromString(<string>value));
    }

    get typecode() : string | null {
        let value = this.get("typecode");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set typecode(value : string) {
        this.set("typecode", Value.fromString(<string>value));
    }

    get decimals() : BigInt {
        let value = this.get("decimals");
        if (!value || value.kind == ValueKind.NULL) {
            return 0;
        } else {
            return value.toBigInt();
        }
    }

    set decimals(value : BigInt) {
        this.set("decimals", Value.fromBigInt(value));
    }

    get maxSupply() : BigInt {
        let value = this.get("maxSupply");
        if (!value || value.kind == ValueKind.NULL) {
            return 0;
        } else {
            return value.toBigInt();
        }
    }

    set maxSupply(value : BigInt) {
        this.set("maxSupply", Value.fromBigInt(value));
    }

    get totalSupply() : BigInt {
        let value = this.get("totalSupply");
        if (!value || value.kind == ValueKind.NULL) {
            return 0;
        } else {
            return value.toBigInt();
        }
    }

    set totalSupply(value : BigInt) {
        this.set("totalSupply", Value.fromBigInt(value));
    }

    get marketunlock() : boolean {
        let value = this.get("marketunlock");
        if (!value || value.kind == ValueKind.NULL) {
            return false;
        } else {
            return value.toBoolean();
        }
    }

    set marketunlock(value : boolean) {
        this.set("marketunlock", Value.fromBoolean(value));
    }

    get gateunlock() : boolean {
        let value = this.get("gateunlock");
        if (!value || value.kind == ValueKind.NULL) {
            return false;
        } else {
            return value.toBoolean();
        }
    }

    set gateunlock(value : boolean) {
        this.set("gateunlock", Value.fromBoolean(value));
    }


    get isUsed() : boolean {
        let value = this.get("isUsed");
        if (!value || value.kind == ValueKind.NULL) {
            return false;
        } else {
            return value.toBoolean();
        }
    }

    set isUsed(value : boolean) {
        this.set("isUsed", Value.fromBoolean(value));
    }

    get creator() : string | null {
        let value = this.get("creator");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set creator(value : string) {
        this.set("creator", Value.fromString(value));
    }

    get contractAddress() : string | null {
        let value = this.get("contractAddress");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set contractAddress(value : string) {
        this.set("contractAddress", Value.fromString(value));
    }

    get WhitePaperUrl() : string | null {
        let value = this.get("WhitePaperUrl");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set WhitePaperUrl(value : string) {
        this.set("WhitePaperUrl", Value.fromString(value));
    }

    get OfficalWebsite() : string | null {
        let value = this.get("OfficalWebsite");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set OfficalWebsite(value : string) {
        this.set("OfficalWebsite", Value.fromString(value));
    }

    get blockExplorerUrl() : string | null {
        let value = this.get("blockExplorerUrl");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set blockExplorerUrl(value : string) {
        this.set("blockExplorerUrl", Value.fromString(value));
    }

    get twriterUrl() : string | null {
        let value = this.get("twriterUrl");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set twriterUrl(value : string) {
        this.set("twriterUrl", Value.fromString(value));
    }

    get bbsUrl() : string | null {
        let value = this.get("bbsUrl");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set bbsUrl(value : string) {
        this.set("bbsUrl", Value.fromString(value));
    }
}


export class gateList extends Entity {
    constructor(id : string) {
        super();
        this.set("id", Value.fromString(id));
    }

    save() : void {
        let id = this.get("id");
        assert(id != null, "Cannot save gateList entity without an ID");
        if (id) {
            assert(
                id.kind == ValueKind.STRING,
                `Entities of type gateList must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
            );
            store.set("gateList", id.toString(), this);
        }
    }

    static loadInBlock(id : string) : gateList | null {
        return changetype<gateList | null>(store.get_in_block("gateList", id));
    }

    static load(id : string) : gateList | null {
        return changetype<gateList | null>(store.get("gateList", id));
    }

    get id() : string {
        let value = this.get("id");
        if (!value || value.kind == ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        } else {
            return value.toString();
        }
    }

    set id(value : string) {
        this.set("id", Value.fromString(value));
    }

    get gateAddress() : string | null {
        let value = this.get("gateAddress");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set gateAddress(value : string) {
        this.set("gateAddress", Value.fromString(<string>value));
    }

    get name() : string | null {
        let value = this.get("name");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set name(value : string) {
        this.set("name", Value.fromString(<string>value));
    }

    get createtimestamp() : BigInt {
        let value = this.get("createtimestamp");
        if (!value || value.kind == ValueKind.NULL) {
            return 0;
        } else {
            return value.toBigInt();
        }
    }

    set createtimestamp(value : BigInt) {
        this.set("createtimestamp", Value.fromBigInt(value));
    }


    get marketunlock() : boolean {
        let value = this.get("marketunlock");
        if (!value || value.kind == ValueKind.NULL) {
            return false;
        } else {
            return value.toBoolean();
        }
    }

    set marketunlock(value : boolean) {
        this.set("marketunlock", Value.fromBoolean(value));
    }

    get gateunlock() : boolean {
        let value = this.get("gateunlock");
        if (!value || value.kind == ValueKind.NULL) {
            return false;
        } else {
            return value.toBoolean();
        }
    }

    set gateunlock(value : boolean) {
        this.set("gateunlock", Value.fromBoolean(value));
    }


    get isUsed() : boolean {
        let value = this.get("isUsed");
        if (!value || value.kind == ValueKind.NULL) {
            return false;
        } else {
            return value.toBoolean();
        }
    }

    set isUsed(value : boolean) {
        this.set("isUsed", Value.fromBoolean(value));
    }

    get full_name() : string | null {
        let value = this.get("full_name");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set full_name(value : string) {
        this.set("full_name", Value.fromString(value));
    }

    get country() : string | null {
        let value = this.get("country");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set country(value : string) {
        this.set("country", Value.fromString(value));
    }

    get OfficalIp() : string | null {
        let value = this.get("OfficalIp");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set OfficalIp(value : string) {
        this.set("OfficalIp", Value.fromString(value));
    }

    get OfficalWebsite() : string | null {
        let value = this.get("OfficalWebsite");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set OfficalWebsite(value : string) {
        this.set("OfficalWebsite", Value.fromString(value));
    }

    get twriterUrl() : string | null {
        let value = this.get("twriterUrl");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set twriterUrl(value : string) {
        this.set("twriterUrl", Value.fromString(value));
    }

    get bbsUrl() : string | null {
        let value = this.get("bbsUrl");
        if (!value || value.kind == ValueKind.NULL) {
            return null;
        } else {
            return value.toString();
        }
    }

    set bbsUrl(value : string) {
        this.set("bbsUrl", Value.fromString(value));
    }
}